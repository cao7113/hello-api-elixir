# https://taskfile.dev
version: "3"
includes:
  fly-io:
    taskfile: ./Taskfile-fly-io.yml
    aliases: [f, fly]
    optional: true

tasks:
  default: mix test --no-start
  sh: iex -S mix run --no-start
  run: iex -S mix run
  rund: iex -S mix run --no-halt --detached

  up: mix bump patch && git push origin main --tag
  deps.up: mix deps.unlock --all && mix deps.clean --all && mix deps.get

  get-info: curl -v http://localhost:4000 | jq
  get-user: curl -s http://localhost:4000/users/123

  ## Git ops
  cmt: mix git_ops.release --yes && git push --follow-tags
  ops.info: mix git_ops.project_info
  ops.rel.init: mix git_ops.release --initial

  ## Release test
  mix.rel:
    env:
      RELEASE_NODE: "hello"
      RELEASE_COOKIE: "cookie-value-set-RELEASE_COOKIE-env-from-Taskfile.yml"
    cmds:
      - |
        mix release --overwrite
        _build/dev/rel/hello_api/bin/hello_api eval "IO.inspect HelloApi.release_info"

  dev.rel:
    env:
      RELEASE_DISTRIBUTION: "name"
      RELEASE_NODE: "hello-api@127.0.0.1"
      RELEASE_COOKIE: "test"
    cmds:
      - |
        _build/dev/rel/hello_api/bin/hello_api start_iex

  prod.rel: MIX_ENV=prod mix release --overwrite
  prod.rel.tar: MIX_ENV=prod RELEASE_TAR=1 mix release --overwrite
  prod.rel.run: |
    task prod.rel
    _build/prod/rel/hello_api/bin/hello_api start_iex

  ## Docker
  dk.build: docker build -t hello-api-elixir .
  dk.run: |
    # task dk.build
    # http://hello-api-elixir.orb.local
    docker run --name hello-api-elixir --rm -it -p 4000:4010 \
      -e "RELEASE_DISTRIBUTION=name" \
      -e "RELEASE_NODE=hi@hello-api-elixir.orb.local" \
      -e "RELEASE_COOKIE=hello" \
      hello-api-elixir bin/hello_api start_iex

  dk.sh: docker run --rm -it hello-api-elixir sh
  dk.iex: docker exec -it hello-api-elixir bin/hello_api remote
  dk.in: docker exec -it hello-api-elixir sh
  # docker run --rm -it hello-api-elixir bin/hello_api
  dk.ping: curl http://hello-api-elixir.orb.local | jq
  dk.down: docker stop hello-api-elixir

  ## Local prod env in Orbstack
  # run `orb` into default ubuntu box(ubox1), then do belows in current project root:
  orb.home: curl http://hello-api-elixir.orb.local:4000/ | jq
  orb.ping: curl http://hello-api-elixir.orb.local:4000/ping
  orb.run: orb _build/orb-prod/current/bin/hello_api {{.CLI_ARGS}}
  orb.pid: task orb-run -- pid
  orb.sh: task orb-run -- remote
  orb.stop: task orb-run -- stop
  # deploy a version from github vsn release, as: task orb-deploy -- v0.1.4 in orb env
  orb.deploy: orb _build/orb-prod/deploy.sh {{.CLI_ARGS}}
  orb.setup: orb run/setup.sh _build/orb-prod
  orb.setup.local: cp run/deploy.sh _build/orb-prod/

  # cat /etc/os-release or cat /etc/debian_version
  # https://hub.docker.com/r/cao7113/hello-api-elixir
  # https://github.com/cao7113/hello-api-elixir/pkgs/container/hello-api-elixir
  ghcr.pull: docker pull ghcr.io/cao7113/hello-api-elixir

  ## Get images
  dk-pull-builder: docker pull hexpm/elixir:1.17.2-erlang-27.0-debian-bullseye-20240701-slim
  dk-pull-runner: docker pull debian:bullseye-20240701-slim
  # https://github.com/OpenLinkOS/registry-mirrors
  get-images: |
    docker pull docker.linkos.org/hexpm/elixir:1.17.2-erlang-27.0-debian-bullseye-20240701-slim
    docker tag docker.linkos.org/hexpm/elixir:1.17.2-erlang-27.0-debian-bullseye-20240701-slim hexpm/elixir:1.17.2-erlang-27.0-debian-bullseye-20240701-slim
    # docker rmi docker.linkos.org/hexpm/elixir:1.17.2-erlang-27.0-debian-bullseye-20240701-slim

    docker pull docker.linkos.org/library/debian:bullseye-20240701-slim
    docker tag docker.linkos.org/library/debian:bullseye-20240701-slim debian:bullseye-20240701-slim

  # Init setup
  mk-hello: mix new hello-api-elixir --app hello_api --sup
